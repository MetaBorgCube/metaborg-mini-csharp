module injections/minics-injections

imports
  signatures/minics-sig
  pp/minics-pp
  libspoofax/term/origin


imports
  injections/Common-injections
  injections/classes-injections
  injections/statements-injections
  injections/expressions-injections


signature
  constructors
    Start-Plhdr : Start


rules

  is-minics-Start-or-inj =
    ?Program(_, _)


rules

  is-minics-inj-cons =
    is-minics-Start-inj-cons

  is-minics-Start-inj-cons =
    fail


rules

  explicate-injections-minics =
    explicate-injections-minics-Start

  explicate-injections-minics-Start =
    origin-track-forced(
      \ Program(usingDecls, classDecls){anno*} -> Program(usingDecls', classDecls'){anno*}
        with usingDecls' := <map(explicate-injections-minics-UsingDecl)> usingDecls
             ; classDecls' := <map(explicate-injections-minics-ClassDecl)> classDecls \
    )

  explicate-injections-minics-Start =
    origin-track-forced(
      \ Start-Plhdr(){anno*} -> Start-Plhdr(){anno*} \
    )

  explicate-injections-minics-Start =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-minics-Start)> alts \
    )


rules

  implicate-injections-minics =
    implicate-injections-minics-Start

  implicate-injections-minics-Start =
    origin-track-forced(
      \ Program(usingDecls, classDecls){anno*} -> Program(usingDecls', classDecls'){anno*}
        with usingDecls' := <map(implicate-injections-minics-UsingDecl)> usingDecls
             ; classDecls' := <map(implicate-injections-minics-ClassDecl)> classDecls \
    )

  implicate-injections-minics-Start =
    origin-track-forced(
      \ Start-Plhdr(){anno*} -> Start-Plhdr(){anno*} \
    )

  implicate-injections-minics-Start =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-minics-Start)> alts \
    )


rules

  upgrade-placeholders-minics =
    upgrade-placeholders-minics-Start

  upgrade-placeholders-minics-Start =
    origin-track-forced(
      \ Program(usingDecls, classDecls){anno*} -> Program(usingDecls', classDecls'){anno*}
        with usingDecls' := <upgrade-list(upgrade-placeholders-minics-UsingDecl)> usingDecls
             ; classDecls' := <upgrade-list(upgrade-placeholders-minics-ClassDecl)> classDecls \
    )

  upgrade-placeholders-minics-Start =
    origin-track-forced(
      \ Start-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "Start" \
    )

  upgrade-placeholders-minics-Start =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-minics-Start)> alts \
    )


rules

  downgrade-placeholders-minics =
    downgrade-placeholders-minics-Start

  downgrade-placeholders-minics-Start =
    origin-track-forced(
      \ Program(usingDecls, classDecls){anno*} -> Program(usingDecls', classDecls'){anno*}
        with usingDecls' := <downgrade-list(downgrade-placeholders-minics-UsingDecl)> usingDecls
             ; classDecls' := <downgrade-list(downgrade-placeholders-minics-ClassDecl)> classDecls \
    )

  downgrade-placeholders-minics-Start =
    origin-track-forced(
      \ p{anno*} -> Start-Plhdr(){anno*}
        where <(is-placeholder + ?Start-Plhdr())> p \
    )

  downgrade-placeholders-minics-Start =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-minics-Start)> alts \
    )


rules

  explicate-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  explicate-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ []{anno*} -> None(){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [t]{anno*} -> Some(<s> t){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [_, _|_] -> <fatal-err(|"Cannot implicate multi-element list to option.")> \
    )


rules

  upgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  upgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <is-list> l
        with l' := <map(s)> l \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <fail> l
        with l' := <make-placeholder> "list" \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> None(){anno*} \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> Some(<s> t){anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ p -> p'
        where <is-placeholder> p
        with p' := [] \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ []{anno*} -> []{anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ [e|es]{anno*} -> [e'|es']{anno*}
        with e' := <s> e
             ; es' := <downgrade-list(s)> es \
    )