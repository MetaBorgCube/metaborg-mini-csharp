module injections/classes-injections

imports
  signatures/classes-sig
  pp/classes-pp
  libspoofax/term/origin


imports
  injections/Common-injections
  injections/types-injections
  injections/statements-injections
  injections/expressions-injections


signature
  constructors
    UsingDecl-Plhdr  : UsingDecl
    ClassDecl-Plhdr  : ClassDecl
    MemberDecl-Plhdr : MemberDecl
    ParamDecl-Plhdr  : ParamDecl
    ParentDecl-Plhdr : ParentDecl


rules

  is-minics-UsingDecl-or-inj =
    ?UsingDecl-Plhdr()

  is-minics-ClassDecl-or-inj =
    ?ClassDecl-Plhdr()

  is-minics-MemberDecl-or-inj =
    ?MemberDecl-Plhdr()

  is-minics-ParamDecl-or-inj =
    ?ParamDecl-Plhdr()

  is-minics-ParentDecl-or-inj =
    ?ParentDecl-Plhdr()

  is-minics-UsingDecl-or-inj =
    ?Using(_)

  is-minics-ClassDecl-or-inj =
    ?Class(_, _, _)

  is-minics-MemberDecl-or-inj =
    ?InstanceField(_, _)

  is-minics-MemberDecl-or-inj =
    ?StaticField(_, _)

  is-minics-MemberDecl-or-inj =
    ?NewField(_, _)

  is-minics-MemberDecl-or-inj =
    ?InstanceMethod(_, _, _, _, _)

  is-minics-MemberDecl-or-inj =
    ?StaticMethod(_, _, _, _, _)

  is-minics-ParamDecl-or-inj =
    ?Param(_, _)

  is-minics-ParentDecl-or-inj =
    ?NoParent()

  is-minics-ParentDecl-or-inj =
    ?Parent(_)


rules

  is-minics-inj-cons =
    is-minics-UsingDecl-inj-cons

  is-minics-UsingDecl-inj-cons =
    fail

  is-minics-inj-cons =
    is-minics-ClassDecl-inj-cons

  is-minics-ClassDecl-inj-cons =
    fail

  is-minics-inj-cons =
    is-minics-MemberDecl-inj-cons

  is-minics-MemberDecl-inj-cons =
    fail

  is-minics-inj-cons =
    is-minics-ParamDecl-inj-cons

  is-minics-ParamDecl-inj-cons =
    fail

  is-minics-inj-cons =
    is-minics-ParentDecl-inj-cons

  is-minics-ParentDecl-inj-cons =
    fail


rules

  explicate-injections-minics =
    explicate-injections-minics-UsingDecl

  explicate-injections-minics =
    explicate-injections-minics-ClassDecl

  explicate-injections-minics =
    explicate-injections-minics-MemberDecl

  explicate-injections-minics =
    explicate-injections-minics-ParamDecl

  explicate-injections-minics =
    explicate-injections-minics-ParentDecl

  explicate-injections-minics-UsingDecl =
    origin-track-forced(
      \ Using(id_){anno*} -> Using(id_'){anno*}
        with id_' := <explicate-injections-minics-ID> id_ \
    )

  explicate-injections-minics-ClassDecl =
    origin-track-forced(
      \ Class(id_, parentDecl, memberDecls){anno*} -> Class(id_', parentDecl', memberDecls'){anno*}
        with id_' := <explicate-injections-minics-ID> id_
             ; parentDecl' := <explicate-injections-minics-ParentDecl> parentDecl
             ; memberDecls' := <map(explicate-injections-minics-MemberDecl)> memberDecls \
    )

  explicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ InstanceField(type, id_){anno*} -> InstanceField(type', id_'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_ \
    )

  explicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ StaticField(type, id_){anno*} -> StaticField(type', id_'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_ \
    )

  explicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ NewField(type, id_){anno*} -> NewField(type', id_'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_ \
    )

  explicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ InstanceMethod(type, id_, paramDecls, stmts, exp){anno*} -> InstanceMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_
             ; paramDecls' := <map(explicate-injections-minics-ParamDecl)> paramDecls
             ; stmts' := <map(explicate-injections-minics-Stmt)> stmts
             ; exp' := <explicate-injections-minics-Exp> exp \
    )

  explicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ StaticMethod(type, id_, paramDecls, stmts, exp){anno*} -> StaticMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_
             ; paramDecls' := <map(explicate-injections-minics-ParamDecl)> paramDecls
             ; stmts' := <map(explicate-injections-minics-Stmt)> stmts
             ; exp' := <explicate-injections-minics-Exp> exp \
    )

  explicate-injections-minics-ParamDecl =
    origin-track-forced(
      \ Param(type, id_){anno*} -> Param(type', id_'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_ \
    )

  explicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ NoParent(){anno*} -> NoParent(){anno*} \
    )

  explicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ Parent(id_){anno*} -> Parent(id_'){anno*}
        with id_' := <explicate-injections-minics-ID> id_ \
    )

  explicate-injections-minics-UsingDecl =
    origin-track-forced(
      \ UsingDecl-Plhdr(){anno*} -> UsingDecl-Plhdr(){anno*} \
    )

  explicate-injections-minics-ClassDecl =
    origin-track-forced(
      \ ClassDecl-Plhdr(){anno*} -> ClassDecl-Plhdr(){anno*} \
    )

  explicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ MemberDecl-Plhdr(){anno*} -> MemberDecl-Plhdr(){anno*} \
    )

  explicate-injections-minics-ParamDecl =
    origin-track-forced(
      \ ParamDecl-Plhdr(){anno*} -> ParamDecl-Plhdr(){anno*} \
    )

  explicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ ParentDecl-Plhdr(){anno*} -> ParentDecl-Plhdr(){anno*} \
    )

  explicate-injections-minics-UsingDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-minics-UsingDecl)> alts \
    )

  explicate-injections-minics-ClassDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-minics-ClassDecl)> alts \
    )

  explicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-minics-MemberDecl)> alts \
    )

  explicate-injections-minics-ParamDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-minics-ParamDecl)> alts \
    )

  explicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-minics-ParentDecl)> alts \
    )


rules

  implicate-injections-minics =
    implicate-injections-minics-UsingDecl

  implicate-injections-minics =
    implicate-injections-minics-ClassDecl

  implicate-injections-minics =
    implicate-injections-minics-MemberDecl

  implicate-injections-minics =
    implicate-injections-minics-ParamDecl

  implicate-injections-minics =
    implicate-injections-minics-ParentDecl

  implicate-injections-minics-UsingDecl =
    origin-track-forced(
      \ Using(id_){anno*} -> Using(id_'){anno*}
        with id_' := <implicate-injections-minics-ID> id_ \
    )

  implicate-injections-minics-ClassDecl =
    origin-track-forced(
      \ Class(id_, parentDecl, memberDecls){anno*} -> Class(id_', parentDecl', memberDecls'){anno*}
        with id_' := <implicate-injections-minics-ID> id_
             ; parentDecl' := <implicate-injections-minics-ParentDecl> parentDecl
             ; memberDecls' := <map(implicate-injections-minics-MemberDecl)> memberDecls \
    )

  implicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ InstanceField(type, id_){anno*} -> InstanceField(type', id_'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_ \
    )

  implicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ StaticField(type, id_){anno*} -> StaticField(type', id_'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_ \
    )

  implicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ NewField(type, id_){anno*} -> NewField(type', id_'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_ \
    )

  implicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ InstanceMethod(type, id_, paramDecls, stmts, exp){anno*} -> InstanceMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_
             ; paramDecls' := <map(implicate-injections-minics-ParamDecl)> paramDecls
             ; stmts' := <map(implicate-injections-minics-Stmt)> stmts
             ; exp' := <implicate-injections-minics-Exp> exp \
    )

  implicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ StaticMethod(type, id_, paramDecls, stmts, exp){anno*} -> StaticMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_
             ; paramDecls' := <map(implicate-injections-minics-ParamDecl)> paramDecls
             ; stmts' := <map(implicate-injections-minics-Stmt)> stmts
             ; exp' := <implicate-injections-minics-Exp> exp \
    )

  implicate-injections-minics-ParamDecl =
    origin-track-forced(
      \ Param(type, id_){anno*} -> Param(type', id_'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_ \
    )

  implicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ NoParent(){anno*} -> NoParent(){anno*} \
    )

  implicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ Parent(id_){anno*} -> Parent(id_'){anno*}
        with id_' := <implicate-injections-minics-ID> id_ \
    )

  implicate-injections-minics-UsingDecl =
    origin-track-forced(
      \ UsingDecl-Plhdr(){anno*} -> UsingDecl-Plhdr(){anno*} \
    )

  implicate-injections-minics-ClassDecl =
    origin-track-forced(
      \ ClassDecl-Plhdr(){anno*} -> ClassDecl-Plhdr(){anno*} \
    )

  implicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ MemberDecl-Plhdr(){anno*} -> MemberDecl-Plhdr(){anno*} \
    )

  implicate-injections-minics-ParamDecl =
    origin-track-forced(
      \ ParamDecl-Plhdr(){anno*} -> ParamDecl-Plhdr(){anno*} \
    )

  implicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ ParentDecl-Plhdr(){anno*} -> ParentDecl-Plhdr(){anno*} \
    )

  implicate-injections-minics-UsingDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-minics-UsingDecl)> alts \
    )

  implicate-injections-minics-ClassDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-minics-ClassDecl)> alts \
    )

  implicate-injections-minics-MemberDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-minics-MemberDecl)> alts \
    )

  implicate-injections-minics-ParamDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-minics-ParamDecl)> alts \
    )

  implicate-injections-minics-ParentDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-minics-ParentDecl)> alts \
    )


rules

  upgrade-placeholders-minics =
    upgrade-placeholders-minics-UsingDecl

  upgrade-placeholders-minics =
    upgrade-placeholders-minics-ClassDecl

  upgrade-placeholders-minics =
    upgrade-placeholders-minics-MemberDecl

  upgrade-placeholders-minics =
    upgrade-placeholders-minics-ParamDecl

  upgrade-placeholders-minics =
    upgrade-placeholders-minics-ParentDecl

  upgrade-placeholders-minics-UsingDecl =
    origin-track-forced(
      \ Using(id_){anno*} -> Using(id_'){anno*}
        with id_' := <upgrade-placeholders-minics-ID> id_ \
    )

  upgrade-placeholders-minics-ClassDecl =
    origin-track-forced(
      \ Class(id_, parentDecl, memberDecls){anno*} -> Class(id_', parentDecl', memberDecls'){anno*}
        with id_' := <upgrade-placeholders-minics-ID> id_
             ; parentDecl' := <upgrade-placeholders-minics-ParentDecl> parentDecl
             ; memberDecls' := <upgrade-list(upgrade-placeholders-minics-MemberDecl)> memberDecls \
    )

  upgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ InstanceField(type, id_){anno*} -> InstanceField(type', id_'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_ \
    )

  upgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ StaticField(type, id_){anno*} -> StaticField(type', id_'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_ \
    )

  upgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ NewField(type, id_){anno*} -> NewField(type', id_'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_ \
    )

  upgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ InstanceMethod(type, id_, paramDecls, stmts, exp){anno*} -> InstanceMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_
             ; paramDecls' := <upgrade-list(upgrade-placeholders-minics-ParamDecl)> paramDecls
             ; stmts' := <upgrade-list(upgrade-placeholders-minics-Stmt)> stmts
             ; exp' := <upgrade-placeholders-minics-Exp> exp \
    )

  upgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ StaticMethod(type, id_, paramDecls, stmts, exp){anno*} -> StaticMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_
             ; paramDecls' := <upgrade-list(upgrade-placeholders-minics-ParamDecl)> paramDecls
             ; stmts' := <upgrade-list(upgrade-placeholders-minics-Stmt)> stmts
             ; exp' := <upgrade-placeholders-minics-Exp> exp \
    )

  upgrade-placeholders-minics-ParamDecl =
    origin-track-forced(
      \ Param(type, id_){anno*} -> Param(type', id_'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_ \
    )

  upgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ NoParent(){anno*} -> NoParent(){anno*} \
    )

  upgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ Parent(id_){anno*} -> Parent(id_'){anno*}
        with id_' := <upgrade-placeholders-minics-ID> id_ \
    )

  upgrade-placeholders-minics-UsingDecl =
    origin-track-forced(
      \ UsingDecl-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "UsingDecl" \
    )

  upgrade-placeholders-minics-ClassDecl =
    origin-track-forced(
      \ ClassDecl-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "ClassDecl" \
    )

  upgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ MemberDecl-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "MemberDecl" \
    )

  upgrade-placeholders-minics-ParamDecl =
    origin-track-forced(
      \ ParamDecl-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "ParamDecl" \
    )

  upgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ ParentDecl-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "ParentDecl" \
    )

  upgrade-placeholders-minics-UsingDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-minics-UsingDecl)> alts \
    )

  upgrade-placeholders-minics-ClassDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-minics-ClassDecl)> alts \
    )

  upgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-minics-MemberDecl)> alts \
    )

  upgrade-placeholders-minics-ParamDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-minics-ParamDecl)> alts \
    )

  upgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-minics-ParentDecl)> alts \
    )


rules

  downgrade-placeholders-minics =
    downgrade-placeholders-minics-UsingDecl

  downgrade-placeholders-minics =
    downgrade-placeholders-minics-ClassDecl

  downgrade-placeholders-minics =
    downgrade-placeholders-minics-MemberDecl

  downgrade-placeholders-minics =
    downgrade-placeholders-minics-ParamDecl

  downgrade-placeholders-minics =
    downgrade-placeholders-minics-ParentDecl

  downgrade-placeholders-minics-UsingDecl =
    origin-track-forced(
      \ Using(id_){anno*} -> Using(id_'){anno*}
        with id_' := <downgrade-placeholders-minics-ID> id_ \
    )

  downgrade-placeholders-minics-ClassDecl =
    origin-track-forced(
      \ Class(id_, parentDecl, memberDecls){anno*} -> Class(id_', parentDecl', memberDecls'){anno*}
        with id_' := <downgrade-placeholders-minics-ID> id_
             ; parentDecl' := <downgrade-placeholders-minics-ParentDecl> parentDecl
             ; memberDecls' := <downgrade-list(downgrade-placeholders-minics-MemberDecl)> memberDecls \
    )

  downgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ InstanceField(type, id_){anno*} -> InstanceField(type', id_'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_ \
    )

  downgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ StaticField(type, id_){anno*} -> StaticField(type', id_'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_ \
    )

  downgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ NewField(type, id_){anno*} -> NewField(type', id_'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_ \
    )

  downgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ InstanceMethod(type, id_, paramDecls, stmts, exp){anno*} -> InstanceMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_
             ; paramDecls' := <downgrade-list(downgrade-placeholders-minics-ParamDecl)> paramDecls
             ; stmts' := <downgrade-list(downgrade-placeholders-minics-Stmt)> stmts
             ; exp' := <downgrade-placeholders-minics-Exp> exp \
    )

  downgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ StaticMethod(type, id_, paramDecls, stmts, exp){anno*} -> StaticMethod(type', id_', paramDecls', stmts', exp'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_
             ; paramDecls' := <downgrade-list(downgrade-placeholders-minics-ParamDecl)> paramDecls
             ; stmts' := <downgrade-list(downgrade-placeholders-minics-Stmt)> stmts
             ; exp' := <downgrade-placeholders-minics-Exp> exp \
    )

  downgrade-placeholders-minics-ParamDecl =
    origin-track-forced(
      \ Param(type, id_){anno*} -> Param(type', id_'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_ \
    )

  downgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ NoParent(){anno*} -> NoParent(){anno*} \
    )

  downgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ Parent(id_){anno*} -> Parent(id_'){anno*}
        with id_' := <downgrade-placeholders-minics-ID> id_ \
    )

  downgrade-placeholders-minics-UsingDecl =
    origin-track-forced(
      \ p{anno*} -> UsingDecl-Plhdr(){anno*}
        where <(is-placeholder + ?UsingDecl-Plhdr())> p \
    )

  downgrade-placeholders-minics-ClassDecl =
    origin-track-forced(
      \ p{anno*} -> ClassDecl-Plhdr(){anno*}
        where <(is-placeholder + ?ClassDecl-Plhdr())> p \
    )

  downgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ p{anno*} -> MemberDecl-Plhdr(){anno*}
        where <(is-placeholder + ?MemberDecl-Plhdr())> p \
    )

  downgrade-placeholders-minics-ParamDecl =
    origin-track-forced(
      \ p{anno*} -> ParamDecl-Plhdr(){anno*}
        where <(is-placeholder + ?ParamDecl-Plhdr())> p \
    )

  downgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ p{anno*} -> ParentDecl-Plhdr(){anno*}
        where <(is-placeholder + ?ParentDecl-Plhdr())> p \
    )

  downgrade-placeholders-minics-UsingDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-minics-UsingDecl)> alts \
    )

  downgrade-placeholders-minics-ClassDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-minics-ClassDecl)> alts \
    )

  downgrade-placeholders-minics-MemberDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-minics-MemberDecl)> alts \
    )

  downgrade-placeholders-minics-ParamDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-minics-ParamDecl)> alts \
    )

  downgrade-placeholders-minics-ParentDecl =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-minics-ParentDecl)> alts \
    )


rules

  explicate-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  explicate-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ []{anno*} -> None(){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [t]{anno*} -> Some(<s> t){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [_, _|_] -> <fatal-err(|"Cannot implicate multi-element list to option.")> \
    )


rules

  upgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  upgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <is-list> l
        with l' := <map(s)> l \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <fail> l
        with l' := <make-placeholder> "list" \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> None(){anno*} \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> Some(<s> t){anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ p -> p'
        where <is-placeholder> p
        with p' := [] \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ []{anno*} -> []{anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ [e|es]{anno*} -> [e'|es']{anno*}
        with e' := <s> e
             ; es' := <downgrade-list(s)> es \
    )