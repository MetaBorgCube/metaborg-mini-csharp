module injections/statements-injections

imports
  signatures/statements-sig
  pp/statements-pp
  libspoofax/term/origin


imports
  injections/Common-injections
  injections/expressions-injections
  injections/types-injections


signature
  constructors
    Stmt-Plhdr : Stmt


rules

  is-minics-Stmt-or-inj =
    ?Block(_)

  is-minics-Stmt-or-inj =
    ?Nop()

  is-minics-Stmt-or-inj =
    ?Exp(_)

  is-minics-Stmt-or-inj =
    ?DeclareTypedVar(_, _)

  is-minics-Stmt-or-inj =
    ?DeclareTypedVarInit(_, _, _)

  is-minics-Stmt-or-inj =
    ?DeclareVarInit(_, _)

  is-minics-Stmt-or-inj =
    ?Assign(_, _)

  is-minics-Stmt-or-inj =
    ?If(_, _, _)

  is-minics-Stmt-or-inj =
    ?Return(_)


rules

  is-minics-inj-cons =
    is-minics-Stmt-inj-cons

  is-minics-Stmt-inj-cons =
    fail


rules

  explicate-injections-minics =
    explicate-injections-minics-Stmt

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ Block(stmts){anno*} -> Block(stmts'){anno*}
        with stmts' := <map(explicate-injections-minics-Stmt)> stmts \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ Nop(){anno*} -> Nop(){anno*} \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ Exp(exp){anno*} -> Exp(exp'){anno*}
        with exp' := <explicate-injections-minics-Exp> exp \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVar(type, id_){anno*} -> DeclareTypedVar(type', id_'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_ \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVarInit(type, id_, exp){anno*} -> DeclareTypedVarInit(type', id_', exp'){anno*}
        with type' := <explicate-injections-minics-Type> type
             ; id_' := <explicate-injections-minics-ID> id_
             ; exp' := <explicate-injections-minics-Exp> exp \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ DeclareVarInit(id_, exp){anno*} -> DeclareVarInit(id_', exp'){anno*}
        with id_' := <explicate-injections-minics-ID> id_
             ; exp' := <explicate-injections-minics-Exp> exp \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ Assign(id_, exp){anno*} -> Assign(id_', exp'){anno*}
        with id_' := <explicate-injections-minics-ID> id_
             ; exp' := <explicate-injections-minics-Exp> exp \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ If(exp, stmt1, stmt2){anno*} -> If(exp', stmt1', stmt2'){anno*}
        with exp' := <explicate-injections-minics-Exp> exp
             ; stmt1' := <explicate-injections-minics-Stmt> stmt1
             ; stmt2' := <explicate-injections-minics-Stmt> stmt2 \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ Return(exp){anno*} -> Return(exp'){anno*}
        with exp' := <explicate-injections-minics-Exp> exp \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ Stmt-Plhdr(){anno*} -> Stmt-Plhdr(){anno*} \
    )

  explicate-injections-minics-Stmt =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(explicate-injections-minics-Stmt)> alts \
    )


rules

  implicate-injections-minics =
    implicate-injections-minics-Stmt

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ Block(stmts){anno*} -> Block(stmts'){anno*}
        with stmts' := <map(implicate-injections-minics-Stmt)> stmts \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ Nop(){anno*} -> Nop(){anno*} \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ Exp(exp){anno*} -> Exp(exp'){anno*}
        with exp' := <implicate-injections-minics-Exp> exp \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVar(type, id_){anno*} -> DeclareTypedVar(type', id_'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_ \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVarInit(type, id_, exp){anno*} -> DeclareTypedVarInit(type', id_', exp'){anno*}
        with type' := <implicate-injections-minics-Type> type
             ; id_' := <implicate-injections-minics-ID> id_
             ; exp' := <implicate-injections-minics-Exp> exp \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ DeclareVarInit(id_, exp){anno*} -> DeclareVarInit(id_', exp'){anno*}
        with id_' := <implicate-injections-minics-ID> id_
             ; exp' := <implicate-injections-minics-Exp> exp \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ Assign(id_, exp){anno*} -> Assign(id_', exp'){anno*}
        with id_' := <implicate-injections-minics-ID> id_
             ; exp' := <implicate-injections-minics-Exp> exp \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ If(exp, stmt1, stmt2){anno*} -> If(exp', stmt1', stmt2'){anno*}
        with exp' := <implicate-injections-minics-Exp> exp
             ; stmt1' := <implicate-injections-minics-Stmt> stmt1
             ; stmt2' := <implicate-injections-minics-Stmt> stmt2 \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ Return(exp){anno*} -> Return(exp'){anno*}
        with exp' := <implicate-injections-minics-Exp> exp \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ Stmt-Plhdr(){anno*} -> Stmt-Plhdr(){anno*} \
    )

  implicate-injections-minics-Stmt =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <map(implicate-injections-minics-Stmt)> alts \
    )


rules

  upgrade-placeholders-minics =
    upgrade-placeholders-minics-Stmt

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Block(stmts){anno*} -> Block(stmts'){anno*}
        with stmts' := <upgrade-list(upgrade-placeholders-minics-Stmt)> stmts \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Nop(){anno*} -> Nop(){anno*} \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Exp(exp){anno*} -> Exp(exp'){anno*}
        with exp' := <upgrade-placeholders-minics-Exp> exp \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVar(type, id_){anno*} -> DeclareTypedVar(type', id_'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_ \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVarInit(type, id_, exp){anno*} -> DeclareTypedVarInit(type', id_', exp'){anno*}
        with type' := <upgrade-placeholders-minics-Type> type
             ; id_' := <upgrade-placeholders-minics-ID> id_
             ; exp' := <upgrade-placeholders-minics-Exp> exp \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ DeclareVarInit(id_, exp){anno*} -> DeclareVarInit(id_', exp'){anno*}
        with id_' := <upgrade-placeholders-minics-ID> id_
             ; exp' := <upgrade-placeholders-minics-Exp> exp \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Assign(id_, exp){anno*} -> Assign(id_', exp'){anno*}
        with id_' := <upgrade-placeholders-minics-ID> id_
             ; exp' := <upgrade-placeholders-minics-Exp> exp \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ If(exp, stmt1, stmt2){anno*} -> If(exp', stmt1', stmt2'){anno*}
        with exp' := <upgrade-placeholders-minics-Exp> exp
             ; stmt1' := <upgrade-placeholders-minics-Stmt> stmt1
             ; stmt2' := <upgrade-placeholders-minics-Stmt> stmt2 \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Return(exp){anno*} -> Return(exp'){anno*}
        with exp' := <upgrade-placeholders-minics-Exp> exp \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Stmt-Plhdr(){anno*} -> p{anno*}
        with p := <make-placeholder> "Stmt" \
    )

  upgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <upgrade-list(upgrade-placeholders-minics-Stmt)> alts \
    )


rules

  downgrade-placeholders-minics =
    downgrade-placeholders-minics-Stmt

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Block(stmts){anno*} -> Block(stmts'){anno*}
        with stmts' := <downgrade-list(downgrade-placeholders-minics-Stmt)> stmts \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Nop(){anno*} -> Nop(){anno*} \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Exp(exp){anno*} -> Exp(exp'){anno*}
        with exp' := <downgrade-placeholders-minics-Exp> exp \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVar(type, id_){anno*} -> DeclareTypedVar(type', id_'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_ \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ DeclareTypedVarInit(type, id_, exp){anno*} -> DeclareTypedVarInit(type', id_', exp'){anno*}
        with type' := <downgrade-placeholders-minics-Type> type
             ; id_' := <downgrade-placeholders-minics-ID> id_
             ; exp' := <downgrade-placeholders-minics-Exp> exp \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ DeclareVarInit(id_, exp){anno*} -> DeclareVarInit(id_', exp'){anno*}
        with id_' := <downgrade-placeholders-minics-ID> id_
             ; exp' := <downgrade-placeholders-minics-Exp> exp \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Assign(id_, exp){anno*} -> Assign(id_', exp'){anno*}
        with id_' := <downgrade-placeholders-minics-ID> id_
             ; exp' := <downgrade-placeholders-minics-Exp> exp \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ If(exp, stmt1, stmt2){anno*} -> If(exp', stmt1', stmt2'){anno*}
        with exp' := <downgrade-placeholders-minics-Exp> exp
             ; stmt1' := <downgrade-placeholders-minics-Stmt> stmt1
             ; stmt2' := <downgrade-placeholders-minics-Stmt> stmt2 \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ Return(exp){anno*} -> Return(exp'){anno*}
        with exp' := <downgrade-placeholders-minics-Exp> exp \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ p{anno*} -> Stmt-Plhdr(){anno*}
        where <(is-placeholder + ?Stmt-Plhdr())> p \
    )

  downgrade-placeholders-minics-Stmt =
    origin-track-forced(
      \ amb(alts){anno*} -> amb(alts'){anno*}
        with alts' := <downgrade-list(downgrade-placeholders-minics-Stmt)> alts \
    )


rules

  explicate-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  explicate-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ []{anno*} -> None(){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [t]{anno*} -> Some(<s> t){anno*} \
    )

  implicate-option(s) =
    origin-track-forced(
      \ [_, _|_] -> <fatal-err(|"Cannot implicate multi-element list to option.")> \
    )


rules

  upgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> []{anno*} \
    )

  upgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> [<s> t]{anno*} \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <is-list> l
        with l' := <map(s)> l \
    )

  upgrade-list(s) =
    origin-track-forced(
      \ l -> l'
        where <fail> l
        with l' := <make-placeholder> "list" \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ None(){anno*} -> None(){anno*} \
    )

  downgrade-option(s) =
    origin-track-forced(
      \ Some(t){anno*} -> Some(<s> t){anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ p -> p'
        where <is-placeholder> p
        with p' := [] \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ []{anno*} -> []{anno*} \
    )

  downgrade-list(s) =
    origin-track-forced(
      \ [e|es]{anno*} -> [e'|es']{anno*}
        with e' := <s> e
             ; es' := <downgrade-list(s)> es \
    )