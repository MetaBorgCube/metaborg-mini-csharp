module analysis

imports

  statixruntime
  statix/api

  pp
  injections/-

  libspoofax/term/origin

rules // Analysis

  // single-file analysis
  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "programOk")

  // see README.md for details on how to switch to multi-file analysis
  // multi-file analysis
//  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "projectOk", "fileOk")

  pre-analyze  = origin-track-forced(explicate-injections-minics-Start)
  post-analyze = origin-track-forced(implicate-injections-minics-Start)

  get-type: exp -> <strip-annos> type
    where <debug(!"Debug get-type: ")> exp
    where a      := <stx-get-ast-analysis <+ fail-msg(|$[no analysis on node [<strip-annos;write-to-string> exp]])>
        ; type   := <stx-get-ast-type(|a) <+ fail-msg(|$[no type on node [<strip-annos;write-to-string> exp]])> exp

  fail-msg(|msg) = err-msg(|$[get-type: [msg]]); fail

rules // Editor Services

  editor-resolve = stx-editor-resolve

  editor-hover = stx-editor-hover

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the pre-analyzed abstract syntax ATerm of a selection.
  debug-show-pre-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"pre-analyzed.aterm")> path
       ; result   := <pre-analyze> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected

  // Prints the type of a selection.
  debug-show-type: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"type.aterm")> path
       ; result   := <get-type> selected
