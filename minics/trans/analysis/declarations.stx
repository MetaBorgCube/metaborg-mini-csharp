module analysis/declarations

imports
  signatures/minics-sig
  analysis/types

signature
  namespaces
    Class       : ID
    Member      : ID
    Var         : ID
    Constructor :
    Return      :

  relations
    type        : occurrence -> TYPE

  name-resolution
    labels
      P     // lexical parent
      E     // super class
      I     // import (using)
      S     // static parent


// Classes
rules declareClass : scope * ID * TYPE

  declareClass(s, decl, T) :-
    !type[Class{decl@decl}, T] in s,
    resolveClass(s, decl) == [(_, (_, _))]
      | error $[Duplicate declaration of class [decl]].

rules resolveClass : scope * ID -> list((path * (occurrence * TYPE)))

  resolveClass(s, ref) = ps :-
    query type
      filter P* I?                  // no transitive imports (I)
      and { d' :- d' == Class{ref@_} }
      min $ < P, $ < I, P < I       // prefer lexical parents (P) over imports (I)
      in s |-> ps.

rules typeOfClass : scope * ID -> TYPE

  typeOfClass(s, ref) = T :- {decl}
    resolveClass(s, ref) == [(_, (decl, T))|_]
      | error $[Undefined class [ref]],
    @ref.ref := decl,
    @ref.type := T.

// Parents
rules resolveParent : scope -> list((path * (occurrence * TYPE)))

  resolveParent(s) = ps :-
    query type
      filter E                     // direct parent (E)
      and { d' :- d' == Class{_@_} }
      min $ < E
      in s |-> ps.

// Variables
rules declareVarOccurrence : scope * occurrence * TYPE

  declareVarOccurrence(s, occ@Var{name@decl}, T) :-
    !type[occ, T] in s,
    resolveVar(s, name) == [(_, (_, _))]
      | error $[Duplicate declaration of variable [name]].

rules declareVar : scope * ID * TYPE

  declareVar(s, decl, T) :-
    declareVarOccurrence(s, Var{decl@decl}, T).

rules resolveVar : scope * ID -> list((path * (occurrence * TYPE)))

  resolveVar(s, ref) = ps :-
    query type
      filter P*
      and { d' :- d' == Var{ref@_} }
      min $ < P
      in s |-> ps.

rules typeOfVar : scope * ID -> TYPE

  typeOfVar(s, ref) = T :- {decl}
    resolveVar(s, ref) == [(_, (decl, T))|_]
      | error $[Undefined variable [ref]],
    @ref.ref := decl,
    @ref.type := T.

rules resolveVarMemberClass : scope * ID -> list((path * (occurrence * TYPE)))

  resolveVarMemberClass(s, ref) = unwrapVarMemberClass(s, ref, resolveVar(s, ref)).

rules unwrapVarMemberClass : scope * ID * list((path * (occurrence * TYPE))) -> list((path * (occurrence * TYPE)))

  unwrapVarMemberClass(_, _, ps@[(_, (Var{decl@_}, T))|_]) = ps.
  unwrapVarMemberClass(s, ref, []) = resolveMemberClass(s, ref).

rules typeOfVarMemberClass : scope * ID -> TYPE

  typeOfVarMemberClass(s, ref) = T :- {decl}
    // resolution order:
    // 1. variables
    // 2. member (instance or static)
    // 3. type
    resolveVarMemberClass(s, ref) == [(_, (decl, T))|_]
      | error $[Undefined variable, member, or type [ref]],
    @ref.ref := decl,
    @ref.type := T.

rules resolveMemberClass : scope * ID -> list((path * (occurrence * TYPE)))

  resolveMemberClass(s, ref) = unwrapMemberClass(s, ref, resolveStaticOrInstanceMember(s, ref)).

rules unwrapMemberClass : scope * ID * list((path * (occurrence * TYPE))) -> list((path * (occurrence * TYPE)))

  unwrapMemberClass(_, _, ps@[(_, (Member{decl@_}, T))|_]) = ps.
  unwrapMemberClass(s, ref, []) = resolveClass(s, ref).

rules typeOfMemberClass : scope * ID -> TYPE

  typeOfMemberClass(s, ref) = T :- {decl}
    // resolution order:
    // 1. member (instance or static)
    // 2. type
    resolveMemberClass(s, ref) == [(_, (decl, T))|_]
      | error $[Undefined member or type [ref]],
    @ref.ref := decl,
    @ref.type := T.


// Constructors
rules declareConstructor : scope * TYPE

  declareConstructor(classScope, T) :-
    !type[Constructor{}, T] in classScope,
    resolveConstructor(classScope) == [(_, (_, _))]
      | error $[Duplicate declaration of constructor].

rules resolveConstructor : scope -> list((path * (occurrence * TYPE)))

  resolveConstructor(classScope) = ps :-
    query type
      filter P*
      and { d' :- d' == Constructor{} }
      min $ < P
      in classScope |-> ps.

rules typeOfConstructor : scope -> TYPE

  typeOfConstructor(classScope) = T :-
    resolveConstructor(classScope) == [(_, (_, T))|_]
      | error $[Undefined constructor].

rules ensureNoInheritanceCycle : scope * scope

  ensureNoInheritanceCycle(classScope, parentClassScope) :-
    query () filter P* E* and { ancestorScope :- ancestorScope == classScope }
      min $ < P, $ < E, E < P
      in parentClassScope |-> []
      | error $[Inheritance cycle detected].


// Members
rules declareInstanceMember : scope * scope * ID * TYPE

  declareInstanceMember(instanceScope, classScope, decl, T) :-
    !type[Member{decl@decl}, T] in instanceScope,
    resolveMember(instanceScope, decl) == [(_, (_, _))]
      | error $[Duplicate declaration of instance member [decl]],
    resolveMember(classScope, decl) == []
      | error $[Shadowing declaration of static member [decl]],
    query type
      filter E E*
      and { d :- d == Member{decl@_} }
      min $ < E
      in instanceScope |-> []
      | error $[Shadowing declaration of instance member [decl] in super class],
    query type
      filter E E*
      and { d :- d == Member{decl@_} }
      min $ < E
      in classScope |-> []
      | error $[Shadowing declaration of static member [decl] in super class].

rules declareStaticMember : scope * ID * TYPE

  declareStaticMember(classScope, decl, T) :-
    !type[Member{decl@decl}, T] in classScope,
    resolveMember(classScope, decl) == [(_, (_, _))]
      | error $[Duplicate declaration of static member [decl]],
    query type
      filter E E*
      and { d :- d == Member{decl@_} }
      min $ < E
      in classScope |-> []
      | error $[Shadowing declaration of static member [decl] in super class].

rules resolveMember : scope * ID -> list((path * (occurrence * TYPE)))

  resolveMember(s, ref) = ps :-
    query type
      filter P* E*                  // any ancestor (E)
      and { d' :- d' == Member{ref@_} }
      min $ < P, $ < E, E < P       // prefer super classes (E) over lexical parents (P)
      in s |-> ps.

rules resolveStaticOrInstanceMember : scope * ID -> list((path * (occurrence * TYPE)))

  resolveStaticOrInstanceMember(s, ref) = ps :-
    query type
      filter P* S? E*               // any ancestor (E), maybe static (S)
      and { d' :- d' == Member{ref@_} }
      min $ < P, $ < E, $ < S, E < P, P < S // prefer super classes (E) over lexical parents (P), prefer lexical parents (P) over static parents (S)
      in s |-> ps.

rules typeOfMember : scope * ID -> TYPE

  typeOfMember(s, ref) = T :- {decl}
    resolveMember(s, ref) == [(_, (decl, T))|_]
      | error $[Undefined member [ref]],
    @ref.ref := decl,
    @ref.type := T.


// Return type
rules declareReturnType : scope * TYPE

  declareReturnType(methodScope, T) :-
    !type[Return{}, T] in methodScope,
    resolveReturnType(methodScope) == [(_, (_, _))]
      | error $[Duplicate declaration of return type].

rules resolveReturnType : scope -> list((path * (occurrence * TYPE)))

  resolveReturnType(s) = ps :-
    query type
      filter P*
      and { d' :- d' == Return{} }
      min $ < P
      in s |-> ps.

rules typeOfReturnType : scope -> TYPE

  typeOfReturnType(s) = T :-
    resolveReturnType(s) == [(_, (_, T))|_].
