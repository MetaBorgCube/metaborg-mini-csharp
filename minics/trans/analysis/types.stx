module analysis/types

imports
  signatures/minics-sig
  analysis/declarations

signature
  sorts TYPE constructors
    CLASS       : string * scope -> TYPE
    OBJECT      : TYPE * scope -> TYPE
    INT         : TYPE
    BOOL        : TYPE
    VOID        : TYPE
    // TODO: Add receiver type?
    METHOD      : list(TYPE) * TYPE -> TYPE

// Types
rules typeOfType : scope * Type -> TYPE

  typeOfType(s, t@Int()) = T :-
    T == INT(),
    @t.type := T.

  typeOfType(s, t@Bool()) = T :-
    T == BOOL(),
    @t.type := T.

  typeOfType(s, t@Void()) = T :-
    T == VOID(),
    @t.type := T.

  typeOfType(s, t@ClassType(ref)) = T :- {decl}
    typeOfClass(s, ref) == T.

// Variables
rules typeOfVar : scope * ID -> TYPE

  typeOfVar(s, ref) = T :- {decl}
    resolveVar(s, ref) == [(_, (decl, T))|_]
      | error $[Undefined variable [ref]],
    @ref.ref := decl,
    @ref.type := T.


